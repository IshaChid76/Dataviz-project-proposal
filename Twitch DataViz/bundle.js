(function (d3$1) {
  'use strict';

  const axes = (
    selection,
    {
      xScale,
      yScale,
      xAxisLabel,
      yAxisLabel,
      xAxisLabelOffset = 25,
      yAxisLabelOffset = 60,
    }
  ) => {
    selection
      .selectAll('g.y-axis')
      .data([null])
      .join('g')
      .attr('class', 'y-axis')
      .attr(
        'transform',
        `translate(${xScale.range()[0]},0)`
      )
      .call(d3$1.axisLeft(yScale));

    selection
      .selectAll('g.x-axis')
      .data([null])
      .join('g')
      .attr('class', 'x-axis')
      .attr(
        'transform',
        `translate(0,${yScale.range()[0]})`
      )
      .call(d3$1.axisBottom(xScale));

    selection
      .selectAll('text.x-axis-label')
      .data([null])
      .join('text')
      .attr(
        'x',
        (xScale.range()[0] + xScale.range()[1]) / 2
      )
      .attr(
        'y',
        yScale.range()[0] + xAxisLabelOffset
      )
      .attr('class', 'x-axis-label')
      .attr('alignment-baseline', 'hanging')
      .attr('text-anchor', 'middle')
      .attr('font-family', 'sans-serif')
      .text(xAxisLabel);

    selection
      .selectAll('text.y-axis-label')
      .data([null])
      .join('text')
      .attr('class', 'y-axis-label')
      .attr('text-anchor', 'middle')
      .attr('transform', 'rotate(-90)')
      .attr('font-family', 'sans-serif')
      .attr(
        'x',
        -(yScale.range()[0] + yScale.range()[1]) / 2
      )
      .attr(
        'y',
        xScale.range()[0] - yAxisLabelOffset
      )
      .text(yAxisLabel);
  };

  const colorLegend = (
    selection,
    {
      colorScale,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
      tickSpacing = 15,
      tickPadding = 15,
      colorLegendLabelX = -10,
      colorLegendLabelY = -24,
      setHoveredValue,
      hoveredValue
    }
  ) => {
    const colorLegendG = selection
      .selectAll('g.color-legend')
      .data([null])
      .join('g')
      .attr('class', 'color-legend')
      .attr(
        'transform',
        `translate(${colorLegendX},${colorLegendY})`
      );

    colorLegendG
      .selectAll('text.color-legend-label')
      .data([null])
      .join('text')
      .attr('x', colorLegendLabelX)
      .attr('y', colorLegendLabelY)
      .attr('class', 'color-legend-label')
      .attr('font-family', 'sans-serif')
      .text(colorLegendLabel);

    colorLegendG
      .selectAll('g.tick')
      .data(colorScale.domain())
      .join((enter) =>
        enter
          .append('g')
          .attr('class', 'tick')
          .call((selection) => {
            selection.append('circle');
            selection.append('text');
          })
      )
      .attr(
        'transform',
        (d, i) => `translate(0, ${i * tickSpacing})`
      )
      .attr('font-size', 10)
      .attr('font-family', 'sans-serif')
      .call((selection) => {
        selection
          .select('circle')
          .attr('r', 6)
          .attr('fill', colorScale);
      		// .attr('fill-opacity', 0.6);
        selection.select('text')
          .attr('dy', '0.32em')
          .attr('x', tickPadding)
          .text((d) => d);
      })
    	.attr('opacity', d => 
            hoveredValue ? (d === hoveredValue ? 1 : 0.2) : 1
      )
    	.on('mouseover', (event, d) => {
      	setHoveredValue(d);
    	})
    	.on('mouseout', () => {
      	setHoveredValue(null);
    	});
  };

  const scatterPlot = (
    selection,
    { data, 
     	width,
     	height, 
     	xValue, 
     	yValue, 
      colorValue,
     	xAxisLabel, 
     	yAxisLabel, 
     	margin,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
     	setHoveredValue,
     	hoveredValue
    }
  ) => {
    const xScale = d3$1.scaleLog()
      .domain([30000, 9000000])
      .range([margin.left, width - margin.right]);

    const yScale = d3$1.scaleLinear()
    	.domain([5000, 260000])
      .range([height - margin.bottom, margin.top]);
    
    const colorScale = d3$1.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(d3$1.schemeCategory10);
    
    // var color = scaleOrdinal()
    //   .domain(["English", "Portuguese", "Spanish", "Korean"])
    //   .range([ "#D0270399", "#21908d99", "#fde72599", "#0920E999"])
    
    selection.call(axes, {
      xScale,
      yScale,
      xAxisLabel,
      yAxisLabel,
    });
    
    selection.call(colorLegend, {
      colorScale,
      colorLegendLabel,
      colorLegendX,
      colorLegendY,
      setHoveredValue,
      hoveredValue
    });
    
    const tooltip = d3
      .select('body')
      .append('div')
      .attr('class', 'd3-tooltip')
      .style('position', 'absolute')
      .style('z-index', '10')
      .style('visibility', 'hidden')
      .style('padding', '5px')
      .style('background', 'rgba(0,0,0,0.6)')
      .style('border-radius', '5px')
      .style('color', 'white');

    selection
      .selectAll('circle.mark')
      .data(data)
      .join('circle')
    	.attr('class', 'mark')
      .attr('cx', (d) => xScale(xValue(d)))
      .attr('cy', (d) => yScale(yValue(d)))
    	.attr('fill', (d) =>
        colorScale(colorValue(d))
      )
      .attr('r', 8)
    	.attr('opacity', (d) => 
          hoveredValue 
            ? colorValue(d) === hoveredValue 
            	? 1 
            	: 0
            : 1
      )
    	.on('mouseover', function (e, d) {
          tooltip
            .html(`${d.Channel}`)
            .style('visibility', 'visible');
      })
    	.on('mousemove', function () {
        tooltip
          .style('top', event.pageY - 10 + 'px')
          .style('left', event.pageX + 10 + 'px');
      })
      .on('mouseout', function () {
        tooltip
          .html(``)
          .style('visibility', 'hidden');
      });
  };

  const viz = (
    container,
    { state, setState }
  ) => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    
    const svg = d3$1.select(container)
      .selectAll('svg')
      .data([null])
      .join('svg')
      .attr('width', width)
      .attr('height', height);

    // state.data could be:
    // * undefined
    // * 'LOADING'
    // * An array of objects
    const { data, hoveredValue } = state;
    
    const setHoveredValue = (d) => {
      setState((state) => ({
      	...state,
        hoveredValue: d
      }));
    };

    if (data && data !== 'LOADING') {
      svg.call(scatterPlot, {
        data,
        width,
        height,
        xValue: (d) => d.Followers,
        yValue: (d) => d.Stream_time_minutes,
        colorValue: (d) => d.Language,
        xAxisLabel: 'Total Followers',
        yAxisLabel: 'Total Streaming Time (minutes)',
        margin: {
          top: 10,
          right: 30,
          bottom: 50,
          left: 80,
        },
        colorLegendLabel: 'Languages',
        colorLegendX: 850,
        colorLegendY: 50,
        setHoveredValue,
        hoveredValue,
      });
    }

    if (data === undefined) {
      setState((state) => ({
        ...state,
        data: 'LOADING',
      }));
      fetch('data.csv')
        .then((response) => response.text())
        .then((csvString) => {
          const data = d3$1.csvParse(csvString);
        
          for (const d of data) {
            d.Watch_time_minutes = +d.Watch_time_minutes;
            d.Stream_time_minutes = +d.Stream_time_minutes;
            d.Peak_viewers = +d.Peak_viewers;
            d.Average_viewers = +d.Average_viewers;
            d.Followers = +d.Followers;
            d.Followers_gained = +d.Followers_gained;
            d.Views_gained = +d.Views_gained;
          }
          setState((state) => ({
            ...state,
            data,
          }));
        });
    }
  };

  const container = d3$1.select('#app').node();
  let state = {};

  const render = () => {
    viz(container, {
      state,
      setState,
    });
  };

  const setState = (next) => {
    state = next(state);
    render();
  };

  render();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,